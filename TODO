- Implement let statement shadowing
- Add more standard datatypes:
	- (u)int(8/16/32/64)
	- sum types (add match keyword. add data or enum keyword to define enums or reuse type?)
	- struct
	- arrays?
	- slices
	- pointers? (pointers with GC? or just references? Are sum types, generics and a maybe monad enough to not have pointers?)
	- float? dec64?
	- tuples? (are two product types really needed? Or is struct enough?)
- Implement generics
- Implement interfaces
- add test case for non-recursive tail call optimization with different stack
  sizes
- Implement multireturn (does this add anything over returning a struct?)
- Compile time evaluation of pure functions with constant arguments
- Add better documentation
- Support Go calling conventions in generated ASM.
- Add method invocation syntax
- Write some non-test sample programs
	(linker? autoformatter?)
- Implement "import" / package namespaces
