- Add better documentation
- Improve match keyword
	- Add let x match y {} ... syntax for extracting value from sum type
- Casting
- Add ability to output WASM as an IR
- Implement multiple dispatch
- Compile time evaluation of pure functions with constant arguments
- Add other base types:
	- tuples
		- Implement multiple return values from a function.
	- (singly linked) lists
- Generic functions/macros?
- Investigate and decide on what other types should be implemented:
	- interfaces?
	- structs? (are 2 product types necessary if there's already a tuple?)
	- pointers? (pointers with GC? Just references? Are sum types, generics and a maybe monad enough to not have pointers?) references?
	- arrays? slices? (are 2 list types necessary if there are already lists?)
	- float? dec64?
	- remove "int" and force an explicit size?
- add better test cases for non-recursive tail call optimization with different stack sizes
- Support Go calling conventions in generated ASM? (Or just add the ability to output different asm syntax on non-Plan9 architectures?)
- Add method invocation syntax
- Write some non-test sample programs
	(linker? autoformatter?)
- Implement "import" / package namespaces
